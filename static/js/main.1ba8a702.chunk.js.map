{"version":3,"sources":["components/Header.js","components/Calculator.js","components/Images.js","components/Hover.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","className","Component","Calculator","props","numChangehandler","e","setState","num1","target","value","numChangehandler2","num2","state","num3","this","finalValue","parseFloat","onChange","numChangehandler3","disabled","Images","onRotateHandler","rotateClass","onRotateEverythingHandler","toggle","changeImage","show1","show2","rotating","width","height","src","onClick","Hover","Tooltip","title","App","toggleRotateClass","rotateEverything","Grid","container","direction","justify","alignItems","item","xs","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1ba8a702.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Header.css';\r\n\r\nclass Header extends Component {\r\n    render() {\r\n        return (\r\n            <header className=\"header\">\r\n                <div className=\"header-text\">\r\n                    Hello World\r\n                </div>\r\n            </header>\r\n        )\r\n    }\r\n}\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\n\r\nclass Calculator extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      num1: \"\",\r\n      num2: \"\",\r\n      num3: \"\",\r\n    }\r\n  }\r\n\r\n  numChangehandler = e => {\r\n    this.setState({ num1: e.target.value })\r\n  }\r\n\r\n  numChangehandler2 = e => {\r\n    this.setState({ num2: e.target.value })\r\n  }\r\n\r\n  numChangehandler3(e) {\r\n    this.setState({ num3: e.target.value })\r\n  }\r\n  render() {\r\n    var finalValue = 0\r\n    var num1 = this.state.num1\r\n    var num2 = this.state.num2\r\n    var num3 = this.state.num3\r\n    finalValue = (num1) ? finalValue + parseFloat(num1) : finalValue\r\n    finalValue = (num2) ? finalValue + parseFloat(num2) : finalValue\r\n    finalValue = (num3) ? finalValue + parseFloat(num3) : finalValue\r\n    return (\r\n      <div>\r\n        <input\r\n          onChange={this.numChangehandler}\r\n          value={this.state.num1}\r\n        />\r\n        +\r\n        <input\r\n          onChange={value => {\r\n            this.numChangehandler2(value)\r\n          }\r\n          }\r\n          value={this.state.num2}\r\n        />\r\n        +\r\n        <input\r\n          onChange={value => {\r\n            this.numChangehandler3(value)\r\n          }\r\n          }\r\n          value={this.state.num3}\r\n        />\r\n        =\r\n        <input\r\n          value={finalValue}\r\n          disabled\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default Calculator;\r\n","import React, { Component } from 'react';\r\nimport './Images.css';\r\n\r\nclass Images extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      rotating: null,\r\n      show1:true,\r\n      show2:false\r\n    }\r\n  }\r\n  onRotateHandler = () => {\r\n    if (this.state.rotateClass === null) {\r\n      this.setState({ rotateClass: 'rotate' })\r\n    } else {\r\n      this.setState({ rotateClass: null })\r\n    }\r\n  }\r\n  onRotateEverythingHandler = () => {\r\n    this.props.toggle()\r\n  }\r\n  changeImage = () => {\r\n    if(this.state.show1){\r\n      this.setState({\r\n        show1:false,\r\n        show2:true\r\n      })\r\n    }else{\r\n      this.setState({\r\n        show1:true,\r\n        show2:false\r\n      })\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"images-container\">\r\n        {(this.state.show1) ?\r\n          <img className={this.state.rotateClass} width=\"150\" height=\"150\" src={\"https://via.placeholder.com/150.svg?text=1\"} />\r\n          :\r\n          null\r\n        }\r\n        {(this.state.show2) ?\r\n          <img className={this.state.rotateClass} width=\"150\" height=\"150\" src={\"https://via.placeholder.com/150.svg?text=2\"} />\r\n          :\r\n          null\r\n        }\r\n        <button onClick={this.onRotateHandler}>rotate Image</button>\r\n        <button onClick={this.changeImage}>change Image</button>\r\n        <button onClick={this.onRotateEverythingHandler}>rotate EVERYTHING</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default Images;\r\n","import React, { Component } from 'react';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\nclass Hover extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Tooltip title=\"Delete\">\r\n\r\n                    <button onClick={this.onRotateEverythingHandler}>Hover Here</button>\r\n                </Tooltip>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Hover;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Header from './Header'\r\nimport Calcaulator from './Calculator'\r\nimport Images from './Images'\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Hover from './Hover'\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      rotateEverything: null\r\n    }\r\n  }\r\n  toggleRotateClass = () => {\r\n    if(this.state.rotateEverything === null){\r\n      this.setState({rotateEverything:'rotate'})\r\n    }else{\r\n      this.setState({rotateEverything:null})\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div className={this.state.rotateEverything}>\r\n        <Header />\r\n        <div className=\"content\">\r\n          \r\n        <Hover />\r\n          <Grid\r\n            container\r\n            direction=\"row\"\r\n            justify=\"space-around\"\r\n            alignItems=\"center\"\r\n          >\r\n            \r\n            <Grid item xs={6}>\r\n              <Calcaulator />\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <Images toggle={this.toggleRotateClass}/>\r\n            </Grid>\r\n          </Grid>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}